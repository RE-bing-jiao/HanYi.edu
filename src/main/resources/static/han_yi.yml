openapi: 3.0.0
info:
  title: Chinese Learning Platform API
  description: API for managing Chinese language learning webapp
  version: 1.0.0
tags:
  - name: Categories
    description: Operations with course categories
  - name: Courses
    description: Operations with courses
  - name: Lessons
    description: Operations with lessons
  - name: Entries
    description: Operations with course entries
  - name: Flashcards
    description: Operations with flashcards
  - name: Users
    description: Operations with users
paths:
  /api/categories:
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: List of categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
    post:
      tags: [Categories]
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed"
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Field 'name' must not be blank", "Field 'description' must not exceed 125 characters"]
              example:
                error: "Validation failed"
                details: ["Field 'name' must not be blank"]

  /api/categories/{id}:
    get:
      tags: [Categories]
      summary: Get a category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found with ID: 10000"
    put:
      tags: [Categories]
      summary: Update a category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed"
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Field 'name' must be unique", "Field 'name' must not be blank"]
        '404':
          description: Category not found
          content:
            application/json:
               example:
                error: "Category not found with ID: 10000"
    delete:
      tags: [Categories]
      summary: Delete a category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              example:
                error: "Category not found with ID: 10000"

  /api/courses:
    get:
      tags: [Courses]
      summary: Get all courses
      responses:
        '200':
          description: List of courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseResponse'
    post:
      tags: [Courses]
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed"
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Field 'header' must not be blank", "Field 'entryDate' must be in the future or present"]
              example:
                error: "Validation failed"
                details: ["Field 'header' must not be blank"]

  /api/courses/{id}:
    get:
      tags: [Courses]
      summary: Get a course by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Course not found
          content:
            application/json:
              example:
                error: "Course not found with ID: 10000"
    put:
      tags: [Courses]
      summary: Update a course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              example:
                error: "Validation failed"
                details: ["Field 'progress' must be between 0.00 and 100.00"]
        '404':
          description: Course not found
          content:
            application/json:
              example:
                error: "Course not found with ID: 10000"
    delete:
      tags: [Courses]
      summary: Delete a course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Course deleted successfully
        '404':
          description: Course not found
          content:
            application/json:
              example:
                error: "Course not found with ID: 10000"

  /api/courses/category/{categoryId}:
    get:
      tags: [Courses]
      summary: Get courses by category ID
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseResponse'
        '404':
          description: Category not found
          content:
            application/json:
              example:
                error: "Category not found with ID: 10000"

  /api/lessons:
    get:
      tags: [Lessons]
      summary: Get all lessons
      responses:
        '200':
          description: List of lessons retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LessonResponse'
    post:
      tags: [Lessons]
      summary: Create a new lesson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonCreateRequest'
      responses:
        '201':
          description: Lesson created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed"
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Field 'header' must not be blank"]
              example:
                error: "Validation failed"
                details: ["Field 'lessonOrderNum' must not be null"]

  /api/lessons/{id}:
    get:
      tags: [Lessons]
      summary: Get a lesson by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lesson retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonResponse'
        '404':
          description: Lesson not found
          content:
            application/json:
              example:
                error: "Lesson not found with ID: 10000"
    put:
      tags: [Lessons]
      summary: Update a lesson
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonCreateRequest'
      responses:
        '200':
          description: Lesson updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              example:
                error: "Validation failed"
                details: ["Field 'description' must not exceed 125 characters"]
        '404':
          description: Lesson not found
          content:
            application/json:
              example:
                error: "Lesson not found with ID: 10000"
    delete:
      tags: [Lessons]
      summary: Delete a lesson
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Lesson deleted successfully
        '404':
          description: Lesson not found
          content:
            application/json:
              example:
                error: "Lesson not found with ID: 10000"

  /api/lessons/course/{courseId}:
    get:
      tags: [Lessons]
      summary: Get lessons by course ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of lessons retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LessonResponse'
        '404':
          description: Course not found
          content:
            application/json:
              example:
                error: "Course not found with ID: 10000"

  /api/entries:
    get:
      tags: [Entries]
      summary: Get all entries
      responses:
        '200':
          description: List of entries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryResponse'
    post:
      tags: [Entries]
      summary: Create a new entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryCreateRequest'
      responses:
        '201':
          description: Entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed"
                  details:
                    type: array
                    items:
                      type: string
                    example: ["Field 'user_id' must not be null", "Field 'entryDate' must be in the future or present"]
              example:
                error: "Validation failed"
                details: ["Field 'entryDate' must not be in the past"]

  /api/entries/{id}:
    get:
      tags: [Entries]
      summary: Get an entry by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponse'
        '404':
          description: Entry not found
          content:
            application/json:
              example:
                error: "Entry not found with ID: 10000"

    delete:
      tags: [Entries]
      summary: Delete an entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Entry deleted successfully
        '404':
          description: Entry not found
          content:
            application/json:
              example:
                error: "Entry not found with ID: 10000"

  /api/entries/user/{userId}:
    get:
      tags: [Entries]
      summary: Get entries by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of entries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found with ID: 10000"

  /api/entries/course/{courseId}:
    get:
      tags: [Entries]
      summary: Get entries by course ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of entries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryResponse'
        '404':
          description: Course not found
          content:
            application/json:
              example:
                error: "Course not found with ID: 10000"

  /api/flashcards:
    get:
      tags: [Flashcards]
      summary: Get all flashcards
      responses:
        '200':
          description: List of flashcards retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlashcardResponse'
    post:
      tags: [Flashcards]
      summary: Create a new flashcard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashcardCreateRequest'
      responses:
        '201':
          description: Flashcard created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              example:
                error: "Validation failed"
                details: ["Field 'frontText' must not be blank", "Field 'backText' must not exceed 35 characters"]

  /api/flashcards/{id}:
    get:
      tags: [Flashcards]
      summary: Get a flashcard by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Flashcard retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'
        '404':
          description: Flashcard not found
          content:
            application/json:
              example:
                error: "Flashcard not found with ID: 10000"
    put:
      tags: [Flashcards]
      summary: Update a flashcard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashcardCreateRequest'
      responses:
        '200':
          description: Flashcard updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              example:
                error: "Validation failed"
                details: ["Field 'backText' must not be blank"]
        '404':
          description: Flashcard not found
          content:
            application/json:
              example:
                error: "Flashcard not found with ID: 10000"
    delete:
      tags: [Flashcards]
      summary: Delete a flashcard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Flashcard deleted successfully
        '404':
          description: Flashcard not found
          content:
            application/json:
              example:
                error: "Flashcard not found with ID: 10000"

  /api/flashcards/user/{userId}:
    get:
      tags: [Flashcards]
      summary: Get flashcards by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of flashcards retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlashcardResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found with ID: 10000"

  /api/users:
    get:
      tags: [Users]
      summary: Get all users
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              example:
                error: "Validation failed"
                details: ["Field 'email' must be a valid email address",
                          "Field 'username' must be between 5 and 25 characters"]

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found with ID: 10000"
    put:
      tags: [Users]
      summary: Update a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request - Invalid Input
          content:
            application/json:
              example:
                error: "Validation failed"
                details: ["Field 'email' must be unique", "Field 'role' must not be null"]
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found with ID: 10000"
    delete:
      tags: [Users]
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found with ID: 10000"

components:
  schemas:
    CategoryCreateRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
          maxLength: 25
          example: "Beginner"
        description:
          type: string
          maxLength: 125
          example: "Courses for beginners"

    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Beginner"
        description:
          type: string
          example: "Courses for beginners"
        courses:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse_CourseResponse'

    CategoryResponse_CourseResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        header:
          type: string
          example: "Basic Chinese"

    CourseCreateRequest:
      type: object
      required: [header, description, categoryId, entryDate, exitDate]
      properties:
        header:
          type: string
          maxLength: 25
          example: "Basic Chinese"
        description:
          type: string
          maxLength: 125
          example: "Introduction to Chinese language"
        categoryId:
          type: integer
          example: 1
        entryDate:
          type: string
          format: date-time
          example: "2027-01-01T00:00:00Z"
        exitDate:
          type: string
          format: date-time
          example: "2027-06-01T00:00:00Z"
        progress:
          type: number
          format: decimal
          minimum: 0
          maximum: 100
          example: 0.0

    CourseResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        header:
          type: string
          example: "Basic Chinese"
        description:
          type: string
          example: "Introduction to Chinese language"
        categoryId:
          type: integer
          example: 1
        categoryName:
          type: string
          example: "Beginner"
        entryDate:
          type: string
          format: date-time
          example: "2027-01-01T00:00:00Z"
        exitDate:
          type: string
          format: date-time
          example: "2027-06-01T00:00:00Z"
        progress:
          type: number
          format: decimal
          example: 0.0
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/CourseResponse_LessonResponse'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CourseResponse_EntryResponse'

    CourseResponse_LessonResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        lessonOrderNum:
          type: integer
          example: 1
        header:
          type: string
          example: "Greetings"

    CourseResponse_EntryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        entryDate:
          type: string
          format: date-time
          example: "2027-01-01T00:00:00Z"
        userId:
          type: integer
          example: 1

    LessonCreateRequest:
      type: object
      required: [lessonOrderNum, header, description, url, courseId]
      properties:
        lessonOrderNum:
          type: integer
          example: 1
        header:
          type: string
          maxLength: 25
          example: "Greetings"
        description:
          type: string
          maxLength: 125
          example: "Basic greetings in Chinese"
        url:
          type: string
          maxLength: 125
          example: "https://example.com/lesson1"
        courseId:
          type: integer
          example: 1

    LessonResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        lessonOrderNum:
          type: integer
          example: 1
        header:
          type: string
          example: "Greetings"
        description:
          type: string
          example: "Basic greetings in Chinese"
        url:
          type: string
          example: "https://example.com/lesson1"
        courseId:
          type: integer
          example: 1
        courseHeader:
          type: string
          example: "Basic Chinese"

    EntryCreateRequest:
      type: object
      required: [userId, courseId, entryDate]
      properties:
        userId:
          type: integer
          example: 1
        courseId:
          type: integer
          example: 1
        entryDate:
          type: string
          format: date-time
          example: "2027-01-01T00:00:00Z"

    EntryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: "student1"
        courseId:
          type: integer
          example: 1
        courseHeader:
          type: string
          example: "Basic Chinese"
        entryDate:
          type: string
          format: date-time
          example: "2027-01-01T00:00:00Z"

    FlashcardCreateRequest:
      type: object
      required: [userId, frontText, backText]
      properties:
        userId:
          type: integer
          example: 1
        frontText:
          type: string
          maxLength: 25
          example: "你好"
        backText:
          type: string
          maxLength: 35
          example: "Hello"

    FlashcardResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: "student1"
        frontText:
          type: string
          example: "你好"
        backText:
          type: string
          example: "Hello"
        createdAt:
          type: string
          format: date-time
          example: "2027-01-01T00:00:00Z"

    UserCreateRequest:
      type: object
      required: [username, password, email, role]
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 25
          example: "student1"
        password:
          type: string
          minLength: 8
          example: "password123"
        email:
          type: string
          format: email
          maxLength: 35
          example: "student1@example.ru"
        role:
          type: string
          enum: [ADMIN, TEACHER, STUDENT]
          example: "STUDENT"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "student1"
        email:
          type: string
          example: "student1@example.ru"
        role:
          type: string
          example: "STUDENT"
        flashcards:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse_FlashcardResponse'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse_EntryResponse'

    UserResponse_FlashcardResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        frontText:
          type: string
          example: "你好"
        backText:
          type: string
          example: "Hello"

    UserResponse_EntryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        courseId:
          type: integer
          example: 1
        courseHeader:
          type: string
          example: "Basic Chinese"